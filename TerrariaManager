#!/bin/bash
#
# AHMZA
# Manage Terraria Servers

#######################################
# prints error messages to STDOUT & STDERR
#######################################
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}

#######################################
# Function to call all functions.
# Globals:
#   VER
#   TERDIR
#   SESSION
#   CONFIG
# Arguments:
#   vFlag - Version
#   wFlag - World Name
#   sFlag - Start world
#   qFlag - Quit world
#   rFlag - restart world
#   RFlag - Remove World
#   cFlag - Create World
# Outputs:
#   If Version set, write version to stdout
#   If Server name set, write server name to stdout
#   If Server name not set, write server name to stderr
#   If no flags write help to stdout
# Returns:
#   None
#######################################
function main() {
  checkFlags $@

  if [ $vFlag ]; then
    echo "Using Terraria Ver: $VER"
  else
    VER=1449
  fi

  if [ $wFlag ]; then
    echo "Terraria Server Name: $WORLDNAME"
  fi

  # Location of Terraria files
  TERDIR="$PWD/servers/$WORLDNAME/$VER"

  # Tmux session ID
  SESSION=terraria-$WORLDNAME

  # Server executable
  SERVER=${TERDIR}/TerrariaServer.bin.x86_64

  # Server Config
  CONFIG=${TERDIR}/server.cfg

  if [ $dFlag ]; then
    isUnzip
    download
    exit 0
  fi

  if [ $sFlag ]; then
    start
    exit 0
  fi

  if [ $qFlag ]; then
    quit
    exit 0
  fi

  if [ $rFlag ]; then
    restart
    exit 0
  fi

  if [ $cFlag ]; then
    create
    exit 0
  fi

  if [ $RFlag ]; then
    remove
    exit 0
  fi

  help

}

#######################################
# Check flags specified
# Globals:
#   sFlag
#   qFlag
#   rFlag
#   cFlag
#   dFlag
#   RFlag
#   vFlag
#   wFlag
#   OPTARG
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   2 if no flags specified
#######################################
checkFlags() {
  sFlag=''
  qFlag=''
  rFlag=''
  cFlag=''
  dFlag=''
  RFlag=''
  vFlag=''
  wFlag=''

  while getopts ":sqrcdRv:w:" flag; do
    case $flag in
    s) sFlag='true' ;;
    q) qFlag='true' ;;
    r) rFlag='true' ;;
    c) cFlag='true' ;;
    d) dFlag='true' ;;
    R) RFlag='true' ;;
    v)
      vFlag='true'
      VER="$OPTARG"
      ;;
    w)
      wFlag='true'
      WORLDNAME="$OPTARG"
      ;;
    *)
      help
      exit 2
      ;;
    esac
  done
}

#######################################
# Check if $WORLDNAME is set
# Globals:
#   $WORLDNAME
# Arguments:
#   $WORLDNAME
# Outputs:
#   If no $WORLDNAME output to STDOUT & STDERR using err()
# Returns:
#   None
#######################################
checkwrldname() {
  if [ -z $WORLDNAME ]; then
    err "Worldname not set. Use -w to set your worldname"
    exit 2
  fi
}

#######################################
# Check if unzip is installed
# Globals:
#   $UNZIP
# Arguments:
#   NONE
# Outputs:
#   NONE
# Returns:
#   $UNZIP = 1
#######################################
isUnzip() {
  if [ ! command -v unzip ] &>/dev/null; then
    while true; do
      read -p "unzip does not exist, would you like to install it (y/n) " yn
      case $yn in
      [yY])
        sudo apt install unzip
        break
        ;;
      [nN])
        echo "Cant Proceed, Exiting."
        exit
        ;;
      *)
        err "invalid response"
        ;;
      esac
    done
  fi
}

#######################################
# Downloads the Terraria server binary.
# Globals:
#   VER
#   SERVER_ZIP
# Arguemnts:
#   VER
# Outputs:
#   writes version to STDOUT
# Returns:
#   None
#######################################
download() {
  SERVER_ZIP=./ver/terraria-server-$VER.zip

  echo "Downloading version: $VER"
  if [ ! -d ./ver ]; then
    echo "Creating ver directory"
    mkdir -p ./ver
    echo
  fi

  if [ ! -f $SERVER_ZIP ]; then
    curl -L "https://terraria.org/api/download/pc-dedicated-server/terraria-server-$VER.zip" >$SERVER_ZIP
    echo
    echo "Unzipping to folder: ./template/$VER"
    if [ -d ./template/$VER ]; then
      rm -r ./template/$VER
      unzip -q $SERVER_ZIP -d ./template
    else
      unzip -q $SERVER_ZIP -d ./template
    fi
  else
    echo "Unzipping to folder: ./template/$VER"
    if [ -d ./template/$VER ]; then
      rm -r ./template/$VER
      unzip -q $SERVER_ZIP -d ./template
    else
      unzip -q $SERVER_ZIP -d ./template
    fi
  fi

  echo "Moving files / folders"
  rm -r ./template/$VER/Windows ./template/$VER/Mac
  mv ./template/$VER/Linux/* ./template/$VER/
  rm -r ./template/$VER/Linux
  chmod +x ./template/$VER/TerrariaServer.bin.x86_64
}

#######################################
# Creates a new Terraria world
# Globals:
#   WORLDNAME
#   PORT
#   MOTD
#   WSIZE
#   DIFF
#   SEED
#   MAXPLAYERS
#   PASSWORD
# Arguments:
#   WORLDNAME
# Outputs:
#   None
# Returns:
#   None
#######################################
create() {
  checkwrldname
  if [ -d $TERDIR ]; then
    err "Server already exists"
  else
    echo "Creating Server..."
    if [ -d ./servers ]; then
      download
      cp -r ./template ./servers/$WORLDNAME
      echo "Server Created"
      echo "Modify server.cfg before running"
    else
      download
      mkdir -p ./servers
      cp -r ./template ./servers/$WORLDNAME
      echo "Server Created"
      echo "Modify server.cfg before running"
    fi
    read -p "Server Port: " PORT
    read -p "Message of the day: " MOTD
    read -p "World Size (1:Small, 2:Medium, 3:Large): " WSIZE
    read -p "Difficulty (0:Normal, 1:Expert, 2:Master, 3:Journey): " DIFF
    read -p "Seed: " SEED
    read -p "Max Players (1-255): " MAXPLAYERS
    read -p "Server Password: " PASSWORD

    touch $CONFIG
    echo "world=$HOME/.local/share/Terraria/Worlds/$WORLDNAME" >>$CONFIG
    echo "port=$PORT" >>$CONFIG
    echo "upnp=0" >>$CONFIG
    echo "motd=$MOTD" >>$CONFIG
    echo "autocreate=$WSIZE" >>$CONFIG
    echo "worldname=$WORLDNAME" >>$CONFIG
    echo "difficulty=$DIFF" >>$CONFIG
    echo "seed=$SEED" >>$CONFIG
    echo "maxplayers=$MAXPLAYERS" >>$CONFIG
    echo "npcstream=60" >>$CONFIG
    echo "priority=1" >>$CONFIG
    echo "password=$PASSWORD" >>$CONFIG
    echo "banlist=banlist.txt" >>$CONFIG
    echo "secure=0" >>$CONFIG
    echo "worldpath=$HOME/.local/share/Terraria/Worlds" >>$CONFIG
    echo "language=en-US" >>$CONFIG

    while true; do
      read -p "Would you like to start server: $WORLDNAME (y/n) " yn
      case $yn in
      [yY])
        start
        break
        ;;
      [nN])
        exit
        ;;
      *)
        err "invalid response"
        ;;
      esac
    done
    exit 0
  fi
}

remove() {
  checkwrldname
  if [ -d $TERDIR ]; then
    echo "Removing Server..."
    quit
    rm -r $TERDIR
    rm -r /home/ahmza/.local/share/Terraria/Worlds/$WORLDNAME.*
    echo "Removed Server"
    exit 0
  else
    err "Nothing to remove"
  fi
}

start() {
  checkwrldname
  ARGS="-config ${CONFIG}"
  CMD="${SERVER} ${ARGS}"

  if [ -d $TERDIR ]; then
    if tmux has-session -t $SESSION; then
      echo "Starting Terraria Server $WORLDNAME... "
      tmux send-keys -t ${SESSION} "$CMD" C-m
      echo "Server started"
    else
      echo "Starting Terraria Server $WORLDNAME... "
      tmux new-session -d -s $SESSION
      tmux send-keys -t ${SESSION} "$CMD" C-m
      echo "Server started"
    fi
  else
    echo "Server does not exist"
    while true; do
      read -p "Would you like to create it (y/n) " yn
      case $yn in
      [yY])
        create
        break
        ;;
      [nN])
        exit
        ;;
      *)
        err "invalid response"
        ;;
      esac
    done
  fi
}

quit() {
  checkwrldname
  if tmux has-session -t $SESSION; then
    tmux send-keys -t ${SESSION} "exit" C-m
    echo "Stopped Server $WORLDNAME"
  else
    echo "Server not running"
  fi
}

restart() {
  quit
  start
}

help() {
  echo "Manage Terraria Servers"
  echo
  echo "Syntax: $0 [options] [worldname] [version]"
  echo "[version] is optional. Defaults to 1449"
  echo
  echo "Options:"
  echo "-s    Start the server"
  echo "-q    Quit the server"
  echo "-r    Restart the server"
  echo "-c    Create a new server"
  echo "-d    Downloads the Terraria server binary"
  echo "-R    Remove an existing server"
  echo "-w    Names of worlds/servers"
  echo
}

main $@
